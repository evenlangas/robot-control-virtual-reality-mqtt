using System.Collections;
using System.Collections.Generic;
using System.Numerics;
using System.Text;
using UnityEngine;
using System.IO;

public class DataLogging : MonoBehaviour
{
    // This script is only used for logging data, and is for the most part generated by copilot.


    public UDPConverter converter;
    public LinkAngleController cobotJoints;

    private float timerCount_s = 0;
    private int refreshCounter = 0;
    private float[] twinAngles;
    private List<float>[] allData = new List<float>[13];

    private List<float> realTwinAngles;
    

    private List<string> dataTitles = new List<string>
    {
        "Time (ms)",
        "Joint 1 (deg)",
        "Joint 2 (deg)",
        "Joint 3 (deg)",
        "Joint 4 (deg)",
        "Joint 5 (deg)",
        "Joint 6 (deg)",
        "Twin 1 (deg)",
        "Twin 2 (deg)",
        "Twin 3 (deg)",
        "Twin 4 (deg)",
        "Twin 5 (deg)",
        "Twin 6 (deg)"
    };
    
    private bool firstWrite = true;
    

    void Start()
    {

        for (int i = 0; i < allData.Length; i++)
        {
            allData[i] = new List<float>();
        }

        twinAngles = new float[]
        {
            cobotJoints.link_1.xDrive.target,
            cobotJoints.link_2.xDrive.target,
            cobotJoints.link_3.xDrive.target,
            cobotJoints.link_4.xDrive.target,
            cobotJoints.link_5.xDrive.target,
            cobotJoints.link_6.xDrive.target
        };    

        InvokeRepeating("LogData", 2f, 0.1f);
    }

    // Update is called once per frame
    void LogData()
    {
        timerCount_s++;
        refreshCounter++;

        realTwinAngles = new List<float>
        {
            -cobotJoints.link_1.gameObject.transform.localEulerAngles.y,
            -cobotJoints.link_2.gameObject.transform.localEulerAngles.x,
            -cobotJoints.link_3.gameObject.transform.localEulerAngles.y,
            -cobotJoints.link_4.gameObject.transform.localEulerAngles.y,
            cobotJoints.link_5.gameObject.transform.localEulerAngles.x,
            -cobotJoints.link_6.gameObject.transform.localEulerAngles.x,
        };    

        //print(realTwinAngles[1] + " - " + realTwinAngles[2] + " - " + realTwinAngles[3] + " - " + realTwinAngles[4] + " - " + realTwinAngles[5]);

        for(int i = 0; i <= 12; i++)
        {
            if(i == 0)
            {
                allData[i].Add(timerCount_s / 10);
            }
            else if(i >= 1 && i <= 6)
            {
                allData[i].Add(converter.anglesIn[i-1]);
            }
            else
            {
                //allData[i].Add(twinAngles[i-7]);
                allData[i].Add(realTwinAngles[i-7]);
            }
        }
        
        if (refreshCounter == 600)
        {
            writeData();
            firstWrite = false;
            refreshCounter = 0;
        }
    }

    void writeData()
    {
        //C:\Users\marcu\Documents\MATLAB\4. Semester\Bacheloroppgave
        string directoryPath = @"C:\Users\marcu\Documents\MATLAB\4. Semester\Bacheloroppgave";
        //string directoryPath = @"C:\Users\marcu\Unity\omrontm14-unity-ros2-main\omrontm14-unity-ros2-main\Assets\MarcusScripts\Datalogging";
        string filePath = Path.Combine(directoryPath, "UnityDatalogging_Joints.csv");

        // Create the directory if it doesn't exist
        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        // Use StreamWriter to write to the CSV file
        using (StreamWriter dataWrite = new StreamWriter(filePath, !firstWrite))
        {
            if (firstWrite)
            {
                // Clear the contents of the file
                dataWrite.Flush();
                dataWrite.BaseStream.SetLength(0);
                string headers = string.Join(",", dataTitles);
                dataWrite.WriteLine(headers);
            }

            // Iterate through the list of allData and write each set of data as a row
            int listLength = allData[0].Count;  // Assuming all lists have the same number of entries
            for (int i = 0; i < listLength; i++)
            {
                List<string> rowData = new List<string>();
                for (int j = 0; j < allData.Length; j++)
                {
                    string tempString = allData[j][i].ToString().Replace(",", ".");
                    rowData.Add(tempString);
                }
                string row = string.Join(",", rowData);
                dataWrite.WriteLine(row);
            }

            // Clear allData after writing to avoid redundancy in data collection
            foreach (var list in allData)
            {
                list.Clear();
            }
        }
    }

}
